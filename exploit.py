# coding: utf-8
import time, hashlib, json
import requests
import http.cookiejar as HC


class bt_api:
    def __init__(self):
        self.__BT_PANEL = "http://127.0.0.1:8888"
        self.__BT_KEY = "ASsdkskPSDSLLpsdsSDswefcssdaS"
        self.PROXY = "192.168.8.8:10809"

    # 取面板日志
    def get_logs(self):
        # 拼接URL地址
        url = self.__BT_PANEL + "/data?action=getData"

        # 准备POST数据
        p_data = self.__get_key_data()  # 取签名
        p_data["table"] = "logs"
        p_data["limit"] = 10
        p_data["tojs"] = "test"

        # 请求面板接口
        result = self.get_data(url, p_data)

        # 解析JSON数据
        return json.loads(result)

    # 添加计划任务
    def add_crontab(self, cmd):
        url = self.__BT_PANEL + "/crontab?action=AddCrontab"
        p_data = self.__get_key_data()  # 取签名
        data = {
            "name": "-",
            "type": "day",
            "where1": "",
            "hour": "1",
            "minute": "30",
            "week": "",
            "sType": "toShell",
            "sBody": "ls",
            "sName": "",
            "backupTo": "localhost",
            "save": "",
            "sBody": cmd,
            "urladdress": "undefined"
        }
        p_data.update(data)
        # 请求面板接口
        result = self.get_data(url, p_data)
        return result

    # 执行计划任务
    def start_task(self, task_id):
        url = self.__BT_PANEL + "/crontab?action=StartTask"
        p_data = self.__get_key_data()  # 取签名
        data = {
            "id": task_id,
        }
        p_data.update(data)
        # 请求面板接口
        result = self.get_data(url, p_data)
        if "任务已执行" in result:
            return True
        else:
            return False

    # 获取执行结果
    def get_logs(self, task_id):
        url = self.__BT_PANEL + "/crontab?action=GetLogs"
        p_data = self.__get_key_data()  # 取签名
        data = {
            "id": task_id,
        }
        p_data.update(data)
        # 请求面板接口
        result = self.get_data(url, p_data)
        msg = json.loads(result)['msg']
        return msg

    # 删除任务
    def del_task(self, task_id):
        url = self.__BT_PANEL + "/crontab?action=DelCrontab"
        p_data = self.__get_key_data()  # 取签名
        data = {
            "id": task_id,
        }
        p_data.update(data)
        # 请求面板接口
        result = self.get_data(url, p_data)
        if "删除成功" in result:
            return True
        return False

    def del_logs(self):
        url = self.__BT_PANEL + "/ajax?action=delClose"
        p_data = self.__get_key_data()  # 取签名
        # 请求面板接口
        result = self.get_data(url, p_data)
        # print(result)
        return result

    def get_crontab(self):
        # /crontab?action=GetCrontab
        url = self.__BT_PANEL + "/crontab?action=GetCrontab"
        p_data = self.__get_key_data()  # 取签名
        # 请求面板接口
        result = self.get_data(url, p_data)
        print(result)
        return result

    def get_task_id(self):
        url = self.__BT_PANEL + "/crontab?action=GetCrontab"
        p_data = self.__get_key_data()  # 取签名
        # 请求面板接口
        result = self.get_data(url, p_data)
        task_id = json.loads(result)[0]['id']
        return task_id

    # 计算MD5
    def __get_md5(self, s):
        m = hashlib.md5()
        m.update(s.encode("utf-8"))
        return m.hexdigest()

    # 构造带有签名的关联数组
    def __get_key_data(self):
        now_time = int(time.time())
        p_data = {
            "request_token": self.__get_md5(
                str(now_time) + "" + self.__get_md5(self.__BT_KEY)
            ),
            "request_time": now_time,
        }
        return p_data

    def get_data(self, url, p_data, timeout=1800):
        cookie_file = self.__get_md5(self.__BT_PANEL) + '.cookie';

        session = requests.session()
        session.cookies = HC.LWPCookieJar(filename=cookie_file)

        #  如果存在cookies文件，则加载，如果不存在则提示
        try:
            session.cookies.load(ignore_discard=True)
        except:
            pass
        
        proxies = {"http": "http://%s" % self.PROXY, "https": "http://%s" % self.PROXY}
        res = session.post(url=url, data=p_data, proxies=proxies)
        res.encode = 'utf-8'
        result = res.text

        session.cookies.save()
        return result

    def eval(self):
        while True:
            cmd = input("请输入命令:")
            if cmd == 'quit' or cmd == 'exit' or cmd == '':
                break
            self.add_crontab(cmd)  # 添加
            task_id = self.get_task_id()  # 获取task_id
            self.start_task(task_id)  # 执行
            time.sleep(1)
            msg = self.get_logs(task_id)  # 获取结果
            print("=" * 5 + "执行结果" + "=" * 5)
            print(msg)
            print("=" * 15)
            self.del_task(task_id)  # 删除任务

if __name__ == "__main__":
    # 实例化宝塔API对象
    my_api = bt_api()
    my_api.eval()
    print("任务列表：")
    my_api.get_crontab()
    my_api.del_logs()  # 清空操作日志